package br.metodista.ads.telas;

import br.metodista.ads.dao.EmprestimoDao;
import br.metodista.ads.dao.LivroDao;
import br.metodista.ads.dao.UsuarioDao;
import br.metodista.ads.modelos.Emprestimo;
import br.metodista.ads.modelos.Livro;
import br.metodista.ads.modelos.Usuario;

import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class TelaEmprestimo extends javax.swing.JFrame {

    private List<Usuario> usuarios = null;
    private List<Livro> livros = null;
    private List<Emprestimo> emprestimos = null;

    /**
     * Creates new form TelaEmprestimo
     */
    public TelaEmprestimo() {
        initComponents();

        carregarUsuarios();
        carregarLivros();
    }

    private void carregarUsuarios() {
        try {
            usuarios = (new UsuarioDao()).listar();

            //Monta um vetor com todos os logins.
            String[] logins = new String[usuarios.size()];
            for (int cont = 0; cont < usuarios.size(); cont++) {
                logins[cont] = usuarios.get(cont).getLogin();
            }

            //Cria um combo box com o vetor de logins.
            listaUsuarios.setModel(new javax.swing.DefaultComboBoxModel(logins));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar as informações (Usuários): " + e.toString(), "Emprestimos", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void carregarLivros() {

        try {
            //Remove todos os livros da tabela.
            for (int cont = tabelaLivros.getRowCount() - 1; cont >= 0; cont--) {
                ((DefaultTableModel) tabelaLivros.getModel()).removeRow(cont);
            }

            livros = (new EmprestimoDao()).listarParaEmprestimos();

            //Adiciona todos os livros na tabela.
            for (Livro l : livros) {
                ((DefaultTableModel) tabelaLivros.getModel()).addRow(l.getDados());
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar as informações (Livros): " + e.toString(), "Emprestimos", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jLabel1 = new javax.swing.JLabel();
    jPanel1 = new javax.swing.JPanel();
    jLabel2 = new javax.swing.JLabel();
    listaUsuarios = new javax.swing.JComboBox();
    jPanel2 = new javax.swing.JPanel();
    jScrollPane1 = new javax.swing.JScrollPane();
    tabelaLivros = new javax.swing.JTable();
    emprestar = new javax.swing.JButton();
    devolver = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    setTitle("Emprestimo de Livro");

    jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
    jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel1.setText("Emprestimo");

    jLabel2.setText("Usuario:");

    org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .add(jLabel2)
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
        .add(listaUsuarios, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addContainerGap())
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(jLabel2)
          .add(listaUsuarios, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    tabelaLivros.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][] {

      },
      new String [] {
        "Título", "Autor", "ISBN", "Páginas", "Edição", "Emprestado?"
      }
    ));
    jScrollPane1.setViewportView(tabelaLivros);

    org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
      jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 582, Short.MAX_VALUE)
    );
    jPanel2Layout.setVerticalGroup(
      jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 304, Short.MAX_VALUE)
    );

    emprestar.setText("Emprestar");
    emprestar.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        emprestarActionPerformed(evt);
      }
    });

    devolver.setText("Devolver");
    devolver.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        devolverActionPerformed(evt);
      }
    });

    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
        .addContainerGap()
        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
          .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addContainerGap())
      .add(layout.createSequentialGroup()
        .add(157, 157, 157)
        .add(emprestar)
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(devolver)
        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(layout.createSequentialGroup()
        .addContainerGap()
        .add(jLabel1)
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(emprestar)
          .add(devolver))
        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void emprestarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emprestarActionPerformed

      try {
          int[] linhasSelecionadas = tabelaLivros.getSelectedRows();
          
          if (linhasSelecionadas.length > 0) {
              //Verifica se os livros estão disponíveis.
              if (todosLivrosDisponiveis(livros, linhasSelecionadas)) {

                  //Para cada livro selecionado faz um emprestimo
                  for (int cont = 0; cont < linhasSelecionadas.length; cont++) {
                      int livroSelecionado = linhasSelecionadas[cont];
                      Livro livro = livros.get(livroSelecionado);

                      //Monta um emprestimo para o usuário e livro.
                      Emprestimo e = new Emprestimo();
                      e.setUsuario(getUsuarioSelecionado());
                      e.setLivro(livro);
                      e.setDataEmprestimo(new Date());

                      EmprestimoDao _dao = new EmprestimoDao();

                      //Adiciona o emprestimo na lista.
                      //emprestimos.add(e);
                      _dao.inserir(e);

                      //Marca que o livro foi emprestado.
                      //livro.setEmprestimo(e);
                  }

                  carregarLivros();

                  JOptionPane.showMessageDialog(this, ":) Livros emprestados!!");
              } else {
                  JOptionPane.showMessageDialog(this, ":( Você escolheu algum livro que já foi emprestado!!");
              }
          } else {
              JOptionPane.showMessageDialog(this, "Selecione o(s) livro(s) para o empréstimo.");
          }

      } catch (Exception e) {
          JOptionPane.showMessageDialog(this, "Erro ao inserir as informações: " + e.toString(), "Emprestimos", JOptionPane.ERROR_MESSAGE);
      }
  }//GEN-LAST:event_emprestarActionPerformed

  private void devolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_devolverActionPerformed
      
      try {
          int[] linhasSelecionadas = tabelaLivros.getSelectedRows();

          for (int cont = 0; cont < linhasSelecionadas.length; cont++) {
              int livroSelecionado = linhasSelecionadas[cont];
              Livro livro = livros.get(livroSelecionado);

              if (livro.getEmprestimo() != null) { //Verifica se o livro está emprestado.
                  Emprestimo emprestimo = livro.getEmprestimo();
                  emprestimo.setDataDevolucao(new Date()); //Registra a data de devolução.

                  //Devolve o livro, então define que o emprestimo do livro como null.
                  //livro.setEmprestimo(null);
                  EmprestimoDao _dao = new EmprestimoDao();
                  _dao.atualizar(emprestimo);
              }
          }
          
          carregarLivros();
          JOptionPane.showMessageDialog(this, ":) Todos os livros foram devolvidos!!!");

      } catch (Exception e) {
          JOptionPane.showMessageDialog(this, "Erro ao inserir as informações: " + e.toString(), "Emprestimos", JOptionPane.ERROR_MESSAGE);
      }
  }//GEN-LAST:event_devolverActionPerformed

    private Usuario getUsuarioSelecionado() {
        //Obtem o usuário selecionado na lista.
        String login = (String) listaUsuarios.getSelectedItem();

        Usuario usuario = null;
        //Percorre todos os usuário para verificar se existe um usuário com o login informado.
        for (Usuario u : usuarios) {
            if (u.getLogin().equals(login)) {
                usuario = u;
                //Se encontrar o usuário, para de procurar.
                break;
            }
        }

        return usuario;
    }

    private boolean todosLivrosDisponiveis(List<Livro> livros, int[] selecionados) {
        boolean disponivel = true;

        for (int cont = 0; cont < selecionados.length; cont++) {
            int livroSelecionado = selecionados[cont];
            if (livros.get(livroSelecionado).getEmprestimo() != null) {
                disponivel = false;
                break;
            }
        }

        return disponivel;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaEmprestimo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaEmprestimo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaEmprestimo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaEmprestimo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaEmprestimo().setVisible(true);
            }
        });
    }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton devolver;
  private javax.swing.JButton emprestar;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JComboBox listaUsuarios;
  private javax.swing.JTable tabelaLivros;
  // End of variables declaration//GEN-END:variables
}
